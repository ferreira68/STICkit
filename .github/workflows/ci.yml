name: CI

on:
  push:
    branches: [ main, '**' ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    # IMPORTANT: run a login shell so micromamba's rc hook activates the env
    defaults:
      run:
        shell: bash -el {0}

    steps:
      - uses: actions/checkout@v4

      - name: Set up micromamba
        uses: mamba-org/setup-micromamba@v2
        with:
          init-shell: bash
          # make env unique per Python to avoid cache/key contention
          environment-name: stickit-py${{ matrix.python-version }}
          cache-environment: true
          cache-environment-key: >-
            ${{ runner.os }}-mamba-env-stickit-${{ matrix.python-version }}-
            ${{ hashFiles('pyproject.toml', 'poetry.lock') }}
          cache-downloads: true
          cache-downloads-key: >-
            ${{ runner.os }}-conda-pkgs-${{ matrix.python-version }}
          post-cleanup: shell-init
          # build the env for THIS Python and include smirnoff99frosst from conda
          create-args: >-
            -c conda-forge
            python=${{ matrix.python-version }}
            mopac
            ambertools
            rdkit
            openff-toolkit
            openmm
            smirnoff99frosst
            pip

      - name: Install Poetry (system)
        uses: snok/install-poetry@v1
        with:
          version: 2.0.1
          virtualenvs-create: false
          installer-parallel: true

      - name: Install Poetry export plugin
        run: poetry self add poetry-plugin-export

      - name: Check lockfile
        run: poetry check --lock

      - name: Export tool locations
        run: |
          echo "STICKIT_MOPAC_EXE=$(command -v mopac)" >> "$GITHUB_ENV"
          echo "AMBERHOME=$CONDA_PREFIX" >> "$GITHUB_ENV"
          echo "$CONDA_PREFIX/bin" >> "$GITHUB_PATH"

      - name: Sanity check toolchain
        run: |
          which python
          python -V
          which mopac || true
          which antechamber || true

      - name: Build artifacts
        run: |
          poetry build
          ls -l dist/

      - name: Export requirements (runtime + dev)
        run: |
          poetry export --without-hashes -f requirements.txt -o requirements.txt
          poetry export --without-hashes -f requirements.txt --with dev -o requirements-dev.txt
          sed -n '1,50p' requirements.txt

      # Workaround: avoid building smirnoff99Frosst from a Git commit on Python 3.12
      # - We already have the conda package, so drop the VCS line from the requirements
      - name: Py3.12 workaround for smirnoff99Frosst (remove VCS line)
        if: ${{ matrix.python-version == '3.12' }}
        run: |
          for f in requirements.txt requirements-dev.txt; do
            # drop any VCS lines for smirnoff99Frosst
            grep -vi 'smirnoff99frosst' "$f" > "$f.new"
            mv "$f.new" "$f"
          done

      - name: Install deps and package
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pip install --no-deps dist/*.whl

      - name: Import smoke
        run: |
          python - <<'PY'
          import stickit, rdkit, openmm
          from openff.toolkit import __version__ as off_ver
          print("python", __import__('sys').version.split()[0])
          print("stickit", getattr(stickit, "__version__", "n/a"))
          print("rdkit", rdkit.__version__)
          print("openmm", openmm.__version__)
          print("openff", off_ver)
          PY

      - name: Build docs (smoke)
        if: ${{ matrix.python-version }} == '3.11'
        run: sphinx-build -W -b html docs docs/_build/html

      - name: Tests
        run: pytest -q
