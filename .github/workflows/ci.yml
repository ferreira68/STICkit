name: CI

on:
  push:
    branches: [ main, '**' ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      # Fast conda on GitHub Actions
      - name: Set up micromamba
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-name: stickit
          activate-environment: stickit
          # Create the env with the heavy native deps
          create-args: >-
            python=3.11
            -c conda-forge
            mopac
            ambertools
            pip

      # Install Poetry system-wide (keeps it out of any venv we create later)
      - name: Install Poetry (system)
        uses: snok/install-poetry@v1
        with:
          version: 2.0.1
          virtualenvs-create: false
          installer-parallel: true
          installation-arguments: "--with dev"

      - name: Install Poetry export plugin
        run: poetry self add poetry-plugin-export

      # Hard gate: lock must be present & consistent with pyproject.toml
      - name: Check lockfile
        run: poetry check --lock

      - name: Export tool locations
        run: |
          echo "STICKIT_MOPAC_EXE=$(command -v mopac)" >> "$GITHUB_ENV"
          echo "AMBERHOME=$CONDA_PREFIX" >> "$GITHUB_ENV"
          echo "$CONDA_PREFIX/bin" >> "$GITHUB_PATH"

#      - name: Create /opt/mopac/bin/mopac shim
#        run: |
#          sudo mkdir -p /opt/mopac/bin
#          sudo ln -sf "$(command -v mopac)" /opt/mopac/bin/mopac

      - name: Sanity check toolchain
        run: |
          which mopac || true
          mopac -v    || mopac --version || true
          which antechamber || true

      # Build wheel/sdist
      - name: Build artifacts
        run: |
          poetry build
          ls -l dist/

      # Export reqs on-demand (not committed)
      - name: Export requirements (runtime + dev)
        run: |
          poetry export --without-hashes -f requirements.txt -o requirements.txt
          poetry export --without-hashes -f requirements.txt --with dev -o requirements-dev.txt
          sed -n '1,50p' requirements.txt

      # Install deps + then the built wheel
      - name: Install deps and package
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pip install --no-deps dist/*.whl

      # Quick import smoke for heavy deps
      - name: Import smoke
        run: |
          python - <<'PY'
          import stickit, rdkit, openmm
          from openff.toolkit import __version__ as off_ver
          print("stickit", getattr(stickit, "__version__", "n/a"))
          print("rdkit", rdkit.__version__)
          print("openmm", openmm.__version__)
          print("openff", off_ver)
          PY

      - name: Build docs (smoke)
        if: ${{ matrix.python-version }} == '3.11'
        run: sphinx-build -W -b html docs docs/_build/html

      - name: Tests
        working-directory: ${{ github.workspace }}
        run: pytest -q

